{
  "address": "0x8fa61F21Fb514d2914a48B29810900Da876E295b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wcanto",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "note_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "Comptroller_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SenderNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseV1Router01.route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "UNSAFE_swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTOMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityCANTO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTO",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseV1Router01.route[]",
          "name": "routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "ctoken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPriceOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "note",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        }
      ],
      "name": "quoteAddLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quoteRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTOMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityCANTO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTO",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTOMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityCANTOWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCANTO",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "setStable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseV1Router01.route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactCANTOForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseV1Router01.route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForCANTO",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseV1Router01.route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSimple",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wcanto",
      "outputs": [
        {
          "internalType": "contract IWCANTO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeeee09a86703019772086c806f97af7c835d966b57f75b81d68caf6a3ca780a7",
  "receipt": {
    "to": null,
    "from": "0x2fA8e44e9A3D833019FCc52D62B4dD05125cA1b1",
    "contractAddress": "0x8fa61F21Fb514d2914a48B29810900Da876E295b",
    "transactionIndex": 0,
    "gasUsed": "4306333",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb423c4524a33dfc474fb17db680cec9adc7eaf23c0f529df82263f8dcd5f196e",
    "transactionHash": "0xeeee09a86703019772086c806f97af7c835d966b57f75b81d68caf6a3ca780a7",
    "logs": [],
    "blockNumber": 85428,
    "cumulativeGasUsed": "4306333",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE007cAc018C8bFFc70dFD0E8f6C24b2E7CFcefB9",
    "0x826551890Dc65655a0Aceca109aB11AbDbD7a07B",
    "0xD354EFE7F59A727BD988252726D86D6dd8d19547",
    "0x3fEb7411f5cb71Ff8cc5E0b1f298866327a15BF1"
  ],
  "numDeployments": 1,
  "solcInputHash": "ed32bda1e8ee7c1e01355cdbba45d1b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wcanto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"note_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Comptroller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct BaseV1Router01.route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"UNSAFE_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTOMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityCANTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct BaseV1Router01.route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTOMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityCANTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTO\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTOMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityCANTOWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCANTO\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"setStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct BaseV1Router01.route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactCANTOForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct BaseV1Router01.route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForCANTO\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct BaseV1Router01.route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSimple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wcanto\",\"outputs\":[{\"internalType\":\"contract IWCANTO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isPriceOracle()\":{\"notice\":\"Indicator that this is a PriceOracle contract (for inspection)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Swap/BaseV1-periphery.sol\":\"BaseV1Router01\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363539333737343533303638\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, ExponentialNoError, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_\\n                        ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n        name = name_;   \\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return 0 if the transfer succeeded, else revert\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            revert TransferComptrollerRejection(allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            revert TransferNotAllowed();\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        uint allowanceNew = startingAllowance - tokens;\\n        uint srcTokensNew = accountTokens[src] - tokens;\\n        uint dstTokensNew = accountTokens[dst] + tokens;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) override external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) override external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) override external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) override external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) override external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\\n        return (\\n            NO_ERROR,\\n            accountTokens[account],\\n            borrowBalanceStoredInternal(account),\\n            exchangeRateStoredInternal()\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() virtual internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() override view external returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() override view external returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) override public view returns (uint) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() override public nonReentrant returns (uint) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() override public view returns (uint) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue efore calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() virtual internal view returns (uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n\\n            uint totalCash = getCashPrior();\\n\\n            uint cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n            uint exchangeRate = cashPlusBorrowsMinusReserves * expScale / _totalSupply;\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() override external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() virtual override public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return NO_ERROR;\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        uint totalBorrowsNew = interestAccumulated + borrowsPrior;\\n        uint totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal virtual {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            revert MintComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert MintFreshnessCheck();\\n        }\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount ac\\n         tually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        uint actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        uint mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         * And write them into storage\\n         */\\n        totalSupply = totalSupply + mintTokens;\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, actualMintAmount, mintTokens);\\n        emit Transfer(address(this), minter, mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant {\\n        accrueInterest(); \\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal virtual {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal() });\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            redeemTokens = redeemTokensIn;\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\n            redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n        if (allowed != 0) {\\n            revert RedeemComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RedeemFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < redeemAmount) {\\n            revert RedeemTransferOutNotPossible();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n         */\\n        totalSupply = totalSupply - redeemTokens;\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), redeemTokens);\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal virtual {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert BorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert BorrowFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert BorrowCashNotAvailable();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n        uint accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n        uint totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n     * @return (uint) the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal virtual returns (uint) {\\n\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            revert RepayBorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RepayBorrowFreshnessCheck();\\n        }\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        uint actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n        uint totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n        return actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant {\\n        accrueInterest();\\n\\n        uint error = cTokenCollateral.accrueInterest();\\n        if (error != NO_ERROR) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            revert LiquidateComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert LiquidateFreshnessCheck();\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            revert LiquidateCollateralFreshnessCheck();\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateLiquidatorIsBorrower();\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            revert LiquidateCloseAmountIsZero();\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint).max) {\\n            revert LiquidateCloseAmountIsUintMax();\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            require(cTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant returns (uint) {\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        uint protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n        uint liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n        uint protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n        uint totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the calculated values into storage */\\n        totalReserves = totalReservesNew;\\n        totalSupply = totalSupply - protocolSeizeTokens;\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n        accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\n        emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) override external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            revert SetPendingAdminOwnerCheck();\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() override external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            revert AcceptAdminPendingAdminCheck();\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) override public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetComptrollerOwnerCheck();\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetReserveFactorAdminCheck();\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetReserveFactorFreshCheck();\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            revert SetReserveFactorBoundsCheck();\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        accrueInterest();\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        _addReservesFresh(addAmount);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (NO_ERROR, actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert ReduceReservesAdminCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert ReduceReservesFreshCheck();\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            revert ReduceReservesCashNotAvailable();\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            revert ReduceReservesCashValidation();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetInterestRateModelOwnerCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetInterestRateModelFreshCheck();\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() virtual internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) virtual internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) virtual internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() virtual {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x977c1efa6a65a6803a13a90744f7bce51ca868586134ca719029baac586f9617\",\"license\":\"BSD-3-Clause\"},\"src/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping (address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n    \\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\n    function approve(address spender, uint amount) virtual external returns (bool);\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\n    function balanceOf(address owner) virtual external view returns (uint);\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() virtual view external returns (uint);\\n    function supplyRatePerBlock() virtual view  external returns (uint);\\n    function totalBorrowsCurrent() virtual external returns (uint);\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\n    function borrowBalanceStored(address account) virtual external view returns (uint);\\n    function exchangeRateCurrent() virtual external returns (uint);\\n    function exchangeRateStored() virtual external view returns (uint);\\n    function getCash() virtual external view returns (uint);\\n    function accrueInterest() virtual external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\n    function _acceptAdmin() virtual external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) virtual external returns (uint);\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) virtual external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) virtual external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() virtual external;\\n}\\n\",\"keccak256\":\"0xa6abc5ed675f12404c665671db54b8fa6af14f5151599555a8972bb605f761e4\",\"license\":\"BSD-3-Clause\"},\"src/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x4111ff0414696caca696cf36ecf3add15133933b51ba57c56cfb08989c82d44f\",\"license\":\"BSD-3-Clause\"},\"src/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b\",\"license\":\"BSD-3-Clause\"},\"src/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5ce25bb36a4ec9490617567a24b55bc813e943bcd4411e060afffe122bea0416\",\"license\":\"BSD-3-Clause\"},\"src/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n\\n    //Accountant Error Codes\\n    error AccountantSupplyError(uint256 borrowAmount);\\n    error AccountantRedeemError(uint256 redeemAmount);\\n}\\n\",\"keccak256\":\"0x4782810ec7d04cb8c3eeb4660fb6650f8b2edfd8b1e2d123dcbe93eff29373d8\",\"license\":\"BSD-3-Clause\"},\"src/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return a + b;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return a * b;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x3a05062282ef8cbf6ec372abc73387ac8105a7eb0ea0f38069ebfd0f434ff98b\",\"license\":\"BSD-3-Clause\"},\"src/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual view external returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual view external returns (uint);\\n}\\n\",\"keccak256\":\"0x8076506ade5e37e9d2acb71a3685b4ecb88dfe12ee8a9936bdfd146ce48aa541\",\"license\":\"BSD-3-Clause\"},\"src/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x3bdb44d513360f19ba6e93960fbf37184cd7952492ab0ee4a91f514b3f2ea923\",\"license\":\"BSD-3-Clause\"},\"src/Swap/BaseV1-libs.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n\\ninterface erc20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n}\\n\\nlibrary Math {\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0x1e9bf0b17252bc691a6798415a032687444bf32ab2942777fd2f697225874cab\"},\"src/Swap/BaseV1-periphery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../CToken.sol\\\";\\nimport \\\"../PriceOracle.sol\\\";\\nimport \\\"./BaseV1-libs.sol\\\";\\n\\ninterface IBaseV1Factory {\\n    function allPairsLength() external view returns (uint);\\n    function isPair(address pair) external view returns (bool);\\n    function pairCodeHash() external pure returns (bytes32);\\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address);\\n}\\n\\ninterface IBaseV1Pair {\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n    function current(address tokenIn, uint amountIn) external view returns(uint);\\n    function token0() external view returns(address);\\n    function token1() external view returns(address);\\n    function stable() external view returns(bool);\\n    function _k(uint x, uint y) external view returns(uint);\\n    //LP token pricing\\n    function sampleReserves(uint points, uint window) external view returns(uint[] memory, uint[] memory);\\n    function sampleSupply(uint points, uint window) external view returns(uint[] memory);\\n    function sample(address tokenIn, uint amountIn, uint points, uint window) external view returns(uint[] memory);\\n    function quote(address tokenIn, uint amountIn, uint granularity) external view returns(uint);\\n}\\n\\ninterface IWCANTO {\\n    function deposit() external payable ;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external ;\\n}\\n\\ninterface ICErc20 {\\n    function underlying() external view returns(address);\\n}\\n\\ncontract BaseV1Router01 is PriceOracle {\\n    //address of Unitroller to obtain prices with respect to USDC\\n    address public immutable note;  \\n    //address of Comptroller, so that price of note may be set to 1 in Account Liquidity calculations\\n    address public immutable Comptroller;\\n\\n    address public admin;\\n\\n    struct route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    address public immutable factory;\\n    IWCANTO public immutable wcanto;\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes32 immutable pairCodeHash;\\n\\n    mapping(address => bool) public isStable;\\n\\n    error SenderNotAdmin(address sender, address admin);\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, \\\"BaseV1Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _wcanto, address note_, address Comptroller_) {\\n        factory = _factory;\\n        pairCodeHash = IBaseV1Factory(_factory).pairCodeHash();\\n        wcanto = IWCANTO(_wcanto);\\n        note = note_;\\n        Comptroller = Comptroller_;\\n        admin = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == address(wcanto)); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // admin for setting the stable pairs\\n    function setAdmin(address admin_) external {\\n        require(msg.sender == admin);\\n        admin = admin_;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"BaseV1Router: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"BaseV1Router: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address tokenA, address tokenB, bool stable) public view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n            hex\\\"ff\\\",\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1, stable)),\\n            pairCodeHash // init code hash\\n        )))));\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, \\\"BaseV1Router: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"BaseV1Router: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB, bool stable) public view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IBaseV1Pair(pairFor(tokenA, tokenB, stable)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable) {\\n        address pair = pairFor(tokenIn, tokenOut, true);\\n        uint amountStable;\\n        uint amountVolatile;\\n        if (IBaseV1Factory(factory).isPair(pair)) {\\n            amountStable = IBaseV1Pair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        pair = pairFor(tokenIn, tokenOut, false);\\n        if (IBaseV1Factory(factory).isPair(pair)) {\\n            amountVolatile = IBaseV1Pair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        return amountStable > amountVolatile ? (amountStable, true) : (amountVolatile, false);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint amountIn, route[] memory routes) public view returns (uint[] memory amounts) {\\n        require(routes.length >= 1, \\\"BaseV1Router: INVALID_PATH\\\");\\n        amounts = new uint[](routes.length+1);\\n        amounts[0] = amountIn;\\n        for (uint i = 0; i < routes.length; i++) {\\n            address pair = pairFor(routes[i].from, routes[i].to, routes[i].stable);\\n            if (IBaseV1Factory(factory).isPair(pair)) {\\n                amounts[i+1] = IBaseV1Pair(pair).getAmountOut(amounts[i], routes[i].from);\\n            }\\n        }\\n    }\\n\\n    function isPair(address pair) public view returns (bool) {\\n        return IBaseV1Factory(factory).isPair(pair);\\n    }\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity) {\\n        // create the pair if it doesn\\\"t exist yet\\n        address _pair = IBaseV1Factory(factory).getPair(tokenA, tokenB, stable);\\n        (uint reserveA, uint reserveB) = (0,0);\\n        uint _totalSupply = 0;\\n        if (_pair != address(0)) {\\n            _totalSupply = erc20(_pair).totalSupply();\\n            (reserveA, reserveB) = getReserves(tokenA, tokenB, stable);\\n        }\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\\n        } else {\\n\\n            uint amountBOptimal = quoteLiquidity(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            } else {\\n                uint amountAOptimal = quoteLiquidity(amountBDesired, reserveB, reserveA);\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            }\\n        }\\n    }\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) public view returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn\\\"t exist yet\\n        address _pair = IBaseV1Factory(factory).getPair(tokenA, tokenB, stable);\\n\\n        if (_pair == address(0)) {\\n            return (0,0);\\n        }\\n\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\\n        uint _totalSupply = erc20(_pair).totalSupply();\\n\\n        amountA = liquidity * reserveA / _totalSupply; // using balances ensures pro-rata distribution\\n        amountB = liquidity * reserveB / _totalSupply; // using balances ensures pro-rata distribution\\n\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal returns (uint amountA, uint amountB) {\\n        require(amountADesired >= amountAMin);\\n        require(amountBDesired >= amountBMin);\\n        // create the pair if it doesn\\\"t exist yet\\n        address _pair = IBaseV1Factory(factory).getPair(tokenA, tokenB, stable);\\n        if (_pair == address(0)) {\\n            _pair = IBaseV1Factory(factory).createPair(tokenA, tokenB, stable);\\n        }\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = quoteLiquidity(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, \\\"BaseV1Router: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = quoteLiquidity(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, \\\"BaseV1Router: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, stable, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = IBaseV1Pair(pair).mint(to);\\n    }\\n\\n    function addLiquidityCANTO(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountCANTOMin,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) returns (uint amountToken, uint amountCANTO, uint liquidity) {\\n        (amountToken, amountCANTO) = _addLiquidity(\\n            token,\\n            address(wcanto),\\n            stable,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountCANTOMin\\n        );\\n        address pair = pairFor(token, address(wcanto), stable);\\n        _safeTransferFrom(token, msg.sender, pair, amountToken);\\n        wcanto.deposit{value: amountCANTO}();\\n        assert(wcanto.transfer(pair, amountCANTO));\\n        liquidity = IBaseV1Pair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountCANTO) _safeTransferCANTO(msg.sender, msg.value - amountCANTO);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        require(IBaseV1Pair(pair).transferFrom(msg.sender, pair, liquidity)); // send liquidity to pair\\n        (uint amount0, uint amount1) = IBaseV1Pair(pair).burn(to);\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"BaseV1Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"BaseV1Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidityCANTO(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountCANTOMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountToken, uint amountCANTO) {\\n        (amountToken, amountCANTO) = removeLiquidity(\\n            token,\\n            address(wcanto),\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountCANTOMin,\\n            address(this),\\n            deadline\\n        );\\n        _safeTransfer(token, to, amountToken);\\n        wcanto.withdraw(amountCANTO);\\n        _safeTransferCANTO(to, amountCANTO);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        {\\n            uint value = approveMax ? type(uint).max : liquidity;\\n            IBaseV1Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        }\\n\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, stable, liquidity, amountAMin, amountBMin, to, deadline);\\n    }\\n\\n    function removeLiquidityCANTOWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountCANTOMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountCANTO) {\\n        address pair = pairFor(token, address(wcanto), stable);\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        IBaseV1Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountCANTO) = removeLiquidityCANTO(token, stable, liquidity, amountTokenMin, amountCANTOMin, to, deadline);\\n    }\\n    \\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, route[] memory routes, address _to) internal virtual {\\n        for (uint i = 0; i < routes.length; i++) {\\n            (address token0,) = sortTokens(routes[i].from, routes[i].to);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = routes[i].from == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n            address to = i < routes.length - 1 ? pairFor(routes[i+1].from, routes[i+1].to, routes[i+1].stable) : _to;\\n            IBaseV1Pair(pairFor(routes[i].from, routes[i].to, routes[i].stable)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        route[] memory routes = new route[](1);\\n        routes[0].from = tokenFrom;\\n        routes[0].to = tokenTo;\\n        routes[0].stable = stable;\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"BaseV1Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"BaseV1Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactCANTOForTokens(uint amountOutMin, route[] calldata routes, address to, uint deadline)\\n    external\\n    payable\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(routes[0].from == address(wcanto), \\\"BaseV1Router: INVALID_PATH\\\");\\n        amounts = getAmountsOut(msg.value, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"BaseV1Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        wcanto.deposit{value: amounts[0]}();\\n        assert(wcanto.transfer(pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForCANTO(uint amountIn, uint amountOutMin, route[] calldata routes, address to, uint deadline)\\n    external\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(routes[routes.length - 1].to == address(wcanto), \\\"BaseV1Router: INVALID_PATH\\\");\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"BaseV1Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, address(this));\\n        wcanto.withdraw(amounts[amounts.length - 1]);\\n        _safeTransferCANTO(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint[] memory amounts,\\n        route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory) {\\n        _safeTransferFrom(routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]);\\n        _swap(amounts, routes, to);\\n        return amounts;\\n    }\\n\\n    function _safeTransferCANTO(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token.code.length > 0, \\\"token code length failure\\\");\\n\\n        erc20 tokenCon = erc20(token);\\n        tokenCon.transferFrom(from, to, value);\\n    }\\n\\n    function setStable(address underlying) external returns (uint) {\\n        if (msg.sender != admin) {\\n            revert SenderNotAdmin(msg.sender, admin);\\n        }\\n\\n        isStable[underlying] = true;\\n    }\\n\\n    //returns the underlying price of the assets as a mantissa (scaled by 1e18)\\n    function getUnderlyingPrice(CToken ctoken) external override view returns(uint) {\\n         address underlying;\\n        { //manual scope to pop symbol off of stack\\n        string memory symbol = ctoken.symbol();\\n        if (compareStrings(symbol, \\\"cCANTO\\\")) {\\n            underlying = address(wcanto);\\n            return getPriceNote(address(wcanto), false);\\n        } else {\\n            underlying = address(ICErc20(address(ctoken)).underlying()); // We are getting the price for a CErc20 lending market\\n        }\\n        //set price statically to 1 when the Comptroller is retrieving Price\\n        if (compareStrings(symbol, \\\"cNOTE\\\")) { // note in terms of note will always be 1 \\n            return 1e18; // Stable coins supported by the lending market are instantiated by governance and their price will always be 1 note\\n        } \\n        else if (compareStrings(symbol, \\\"cUSDT\\\") && (msg.sender == Comptroller )) {\\n            uint decimals = erc20(underlying).decimals();\\n            return 1e18 * 1e18 / (10 ** decimals); //Scale Price as a mantissa to maintain precision in comptroller\\n        } \\n        else if (compareStrings(symbol, \\\"cUSDC\\\") && (msg.sender == Comptroller)) {\\n            uint decimals = erc20(underlying).decimals();\\n            return 1e18 * 1e18 / (10 ** decimals); //Scale Price as a mantissa to maintain precision in comptroller\\n        }\\n        }\\n        \\n        if (isPair(underlying)) { // this is an LP Token\\n            return getPriceLP(IBaseV1Pair(underlying));\\n        }\\n        // this is not an LP Token\\n        else {\\n            if (isStable[underlying]) {\\n                return getPriceNote(underlying, true); // value has already been scaled\\n            }\\n\\n            return getPriceCanto(underlying) * getPriceNote(address(wcanto), false) / 1e18;\\n        }   \\n    }\\n    \\n    //return the price of this asset in terms of Canto\\n    function getPriceCanto(address token_) internal view returns(uint) {\\n        erc20 token = erc20(token_);\\n        address pair = pairFor(address(wcanto), address(token), false);\\n        if (!isPair(pair)) {\\n            return 0; // this pair does not exist with Canto\\n        }\\n        uint decimals = 10 ** token.decimals(); // get decimals of token\\n        uint price = IBaseV1Pair(pair).quote(address(token), decimals, 8); // how much Canto is this asset worth?\\n        return price * 1e18 / decimals; //return the scaled price\\n    } \\n    \\n    // returns the price of token in terms of note, scaled by 18 decimals, Notice this will most likely be used with pairs that are stable with note\\n    function getPriceNote(address token_, bool stable) internal view returns(uint) { \\n        erc20 token = erc20(token_);\\n        address pair = pairFor(note, address(token), stable); // pairs with Note may be volatile or stable\\n        if (!isPair(pair)) {\\n            return 0; // this pair has not yet been deployed\\n        }\\n        uint decimals = 10 ** token.decimals();\\n        uint price = IBaseV1Pair(pair).quote(address(token), decimals, 8);\\n        return price * 1e18 / decimals; // divide by decimals now to maintain precision\\n    }\\n\\n    // this function returns the TWAP of the LP tokens from pair\\n    function getPriceLP(IBaseV1Pair pair) internal view returns(uint) {\\n        uint[] memory supply = pair.sampleSupply(8, 1);\\n        uint[] memory prices; \\n        uint[] memory unitReserves; \\n        uint[] memory assetReserves; \\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        uint decimals;\\n\\n        if (pair.stable()) { // stable pairs will be priced in terms of Note\\n            if (token0 == note) { //token0 is the unit, token1 will be priced with respect to this asset initially\\n                decimals = 10 ** (erc20(token1).decimals()); // we must normalize the price of token1 to 18 decimals\\n                prices = pair.sample(token1, decimals, 8, 1);\\n                (unitReserves, assetReserves) = pair.sampleReserves(8, 1);\\n            } else {\\n                decimals = 10 ** (erc20(token0).decimals());\\n                prices = pair.sample(token0, decimals, 8, 1);\\n                (assetReserves, unitReserves) = pair.sampleReserves(8, 1);\\n            }\\n        } else { // non-stable pairs will be priced in terms of Canto\\n            if (token0 == address(wcanto)) { // token0 is Canto, and the unit asset of this pair is Canto\\n                decimals = 10 ** (erc20(token1).decimals());\\n                prices = pair.sample(token1, decimals, 8, 1);\\n                (unitReserves, assetReserves) = pair.sampleReserves(8, 1);\\n            } else {\\n                decimals = 10 ** (erc20(token0)).decimals();\\n                prices = pair.sample(token0, decimals, 8, 1);\\n                (assetReserves, unitReserves) = pair.sampleReserves(8, 1);\\n            }\\n        }\\n        uint LpPricesCumulative;\\n\\n        for(uint i; i < 8; ++i) {\\n            uint token0TVL = assetReserves[i] * (prices[i] / decimals);\\n            uint token1TVL = unitReserves[i]; // price of the unit asset is always 1\\n            LpPricesCumulative += (token0TVL + token1TVL) * 1e18 / supply[i];  \\n        }\\n        uint LpPrice = LpPricesCumulative / 8; // take the average of the cumulative prices \\n        \\n        if (pair.stable()) { // this asset has been priced in terms of Note\\n            return LpPrice;\\n        }\\n        // this asset has been priced in terms of Canto\\n        return LpPrice * getPriceNote(address(wcanto), false) / 1e18; // return the price in terms of Note\\n    }   \\n\\n\\n    function compareStrings(string memory str1, string memory str2) internal pure returns(bool) {\\n        return (keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2)));\\n    }\\n\\n    function _returnStableBooleans(uint8 stable) internal pure returns (bool, bool){\\n        if (stable == 2) {\\n            return (true, false);\\n        } else if (stable == 3) {\\n            return (false, true);\\n        } else if (stable == 4) {\\n            return (false, false);\\n        } else {\\n            return (true, true);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a5572b3e311e0b912520030f75cbcc6f2d7e6eabbc0bd11ab12a6ed1c1cce0f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162004efa38038062004efa8339810160408190526200003591620000f8565b6001600160a01b03841660c081905260408051631355724960e31b81529051639aab9248916004808201926020929091908290030181865afa15801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000155565b610100526001600160a01b0392831660e0529082166080521660a05250600080546001600160a01b031916331790556200016f565b80516001600160a01b0381168114620000f357600080fd5b919050565b600080600080608085870312156200010f57600080fd5b6200011a85620000db565b93506200012a60208601620000db565b92506200013a60408601620000db565b91506200014a60608601620000db565b905092959194509250565b6000602082840312156200016857600080fd5b5051919050565b60805160a05160c05160e05161010051614c666200029460003960006115370152600081816101d6015281816104c2015281816106cc0152818161091801528181610a1c01528181610b2f01528181610bbd01528181610f3301528181610f6901528181610f9e015281816110330152818161212501528181612175015281816122660152818161258a015281816125b00152818161286e0152818161379c01528181613ae30152613b3501526000818161058601528181611355015281816114fc015281816117c9015281816118dd01528181611cd401528181611e480152818161235601528181612ceb0152612d8c015260008181610354015281816126b801526127ae0152600081816102e801528181613181015261348f0152614c666000f3fe6080604052600436106101c65760003560e01c8063704b6c02116100f7578063c45a015511610095578063e5e31b1311610064578063e5e31b1314610616578063f41766d814610636578063f851a44014610656578063fc57d4df1461067657600080fd5b8063c45a015514610574578063c79db9d7146105a8578063dba71376146105c8578063dd54e2a4146105f657600080fd5b80639185f6ec116100d15780639185f6ec146104e45780639881fcb41461051457806398a0fb3c14610534578063a32b1fcd1461055457600080fd5b8063704b6c02146104705780637301e3c8146104905780637aa497d9146104b057600080fd5b80634ae36e8e116101645780635a47ddc31161013e5780635a47ddc3146103d65780635e1e6325146103f65780635e60dab51461042b57806366331bba1461044b57600080fd5b80634ae36e8e146103425780634c1ee03e14610376578063544caa561461039657600080fd5b8063116e4ea3116101a0578063116e4ea31461028857806313dcfc59146102b657806326d111f5146102d65780634386e63c1461032257600080fd5b80630483e3cc1461020a578063058e200a146102405780630dede6c41461025357600080fd5b3661020557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461020357610203613c8a565b005b600080fd5b34801561021657600080fd5b5061022a610225366004613d08565b610696565b6040516102379190613d7b565b60405180910390f35b61022a61024e366004613dbf565b6109f7565b34801561025f57600080fd5b5061027361026e366004613e34565b610d56565b60408051928352602083019190915201610237565b61029b610296366004613eb9565b610f07565b60408051938452602084019290925290820152606001610237565b3480156102c257600080fd5b5061022a6102d1366004613f2b565b611148565b3480156102e257600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610237565b34801561032e57600080fd5b5061027361033d366004613f8f565b61134e565b34801561034e57600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038257600080fd5b5061030a610391366004613fe0565b6114b5565b3480156103a257600080fd5b506103b66103b136600461402b565b6115bd565b604080516001600160a01b03938416815292909116602083015201610237565b3480156103e257600080fd5b5061029b6103f1366004614064565b6116b1565b34801561040257600080fd5b506104166104113660046140f3565b611791565b60408051928352901515602083015201610237565b34801561043757600080fd5b50610273610446366004613fe0565b6119e5565b34801561045757600080fd5b50610460600181565b6040519015158152602001610237565b34801561047c57600080fd5b5061020361048b36600461412a565b611aaf565b34801561049c57600080fd5b5061022a6104ab3660046141b2565b611ae8565b3480156104bc57600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f057600080fd5b506104606104ff36600461412a565b60016020526000908152604090205460ff1681565b34801561052057600080fd5b5061022a61052f3660046142f4565b611bbe565b34801561054057600080fd5b5061029b61054f36600461439a565b611e40565b34801561056057600080fd5b5061027361056f366004614404565b612040565b34801561058057600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b457600080fd5b506102736105c3366004613eb9565b6120fb565b3480156105d457600080fd5b506105e86105e336600461412a565b6121f0565b604051908152602001610237565b34801561060257600080fd5b506102736106113660046144c4565b61225b565b34801561062257600080fd5b5061046061063136600461412a565b612334565b34801561064257600080fd5b5061022a610651366004613d08565b6123c9565b34801561066257600080fd5b5060005461030a906001600160a01b031681565b34801561068257600080fd5b506105e861069136600461412a565b6124ee565b606081428110156106c25760405162461bcd60e51b81526004016106b990614572565b60405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866106f96001826145b7565b818110610708576107086145ce565b9050606002016020016020810190610720919061412a565b6001600160a01b0316146107465760405162461bcd60e51b81526004016106b9906145e4565b6107a2888787808060200260200160405190810160405280939291908181526020016000905b82821015610798576107896060830286013681900381019061461b565b8152602001906001019061076c565b5050505050611bbe565b91508682600184516107b491906145b7565b815181106107c4576107c46145ce565b602002602001015110156107ea5760405162461bcd60e51b81526004016106b990614637565b6108b986866000818110610800576108006145ce565b610816926020606090920201908101915061412a565b336108998989600081811061082d5761082d6145ce565b610843926020606090920201908101915061412a565b8a8a6000818110610856576108566145ce565b905060600201602001602081019061086e919061412a565b8b8b6000818110610881576108816145ce565b9050606002016040016020810190610391919061467f565b856000815181106108ac576108ac6145ce565b60200260200101516128b1565b610916828787808060200260200160405190810160405280939291908181526020016000905b8282101561090b576108fc6060830286013681900381019061461b565b815260200190600101906108df565b505050505030612991565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161095491906145b7565b81518110610964576109646145ce565b60200260200101516040518263ffffffff1660e01b815260040161098a91815260200190565b600060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b505050506109ec8483600185516109cf91906145b7565b815181106109df576109df6145ce565b6020026020010151612be6565b509695505050505050565b60608142811015610a1a5760405162461bcd60e51b81526004016106b990614572565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610a5757610a576145ce565b610a6d926020606090920201908101915061412a565b6001600160a01b031614610a935760405162461bcd60e51b81526004016106b9906145e4565b610ae5348787808060200260200160405190810160405280939291908181526020016000905b8282101561079857610ad66060830286013681900381019061461b565b81526020019060010190610ab9565b9150868260018451610af791906145b7565b81518110610b0757610b076145ce565b60200260200101511015610b2d5760405162461bcd60e51b81526004016106b990614637565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610b6f57610b6f6145ce565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610c5488886000818110610c0057610c006145ce565b610c16926020606090920201908101915061412a565b89896000818110610c2957610c296145ce565b9050606002016020016020810190610c41919061412a565b8a8a6000818110610881576108816145ce565b84600081518110610c6757610c676145ce565b60200260200101516040518363ffffffff1660e01b8152600401610ca09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce3919061469c565b610cef57610cef613c8a565b610d4c828787808060200260200160405190810160405280939291908181526020016000905b82821015610d4157610d326060830286013681900381019061461b565b81526020019060010190610d15565b505050505086612991565b5095945050505050565b6000808242811015610d7a5760405162461bcd60e51b81526004016106b990614572565b6000610d878c8c8c6114b5565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e01919061469c565b610e0a57600080fd5b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a91906146b9565b915091506000610e8a8f8f6115bd565b509050806001600160a01b03168f6001600160a01b031614610ead578183610eb0565b82825b90975095508a871015610ed55760405162461bcd60e51b81526004016106b9906146dd565b89861015610ef55760405162461bcd60e51b81526004016106b990614720565b50505050509850989650505050505050565b60008060008342811015610f2d5760405162461bcd60e51b81526004016106b990614572565b610f5c8b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d612cb4565b90945092506000610f8e8c7f00000000000000000000000000000000000000000000000000000000000000008d6114b5565b9050610f9c8c3383886128b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a4919061469c565b6110b0576110b0613c8a565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156110f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111c9190614763565b925083341115611139576111393361113486346145b7565b612be6565b50509750975097945050505050565b6060814281101561116b5760405162461bcd60e51b81526004016106b990614572565b604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161118257905050905087816000815181106111c5576111c56145ce565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106111fd576111fd6145ce565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600081518110611235576112356145ce565b60209081029190910101519015156040909101526112538a82611bbe565b925088836001855161126591906145b7565b81518110611275576112756145ce565b6020026020010151101561129b5760405162461bcd60e51b81526004016106b990614637565b611336816000815181106112b1576112b16145ce565b60200260200101516000015133611323846000815181106112d4576112d46145ce565b602002602001015160000151856000815181106112f3576112f36145ce565b60200260200101516020015186600081518110611312576113126145ce565b6020026020010151604001516114b5565b866000815181106108ac576108ac6145ce565b611341838287612991565b5050979650505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b81526004016113a39392919061477c565b602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906147a0565b90506001600160a01b0381166114015760008092509250506114ac565b60008061140f8989896119e5565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114779190614763565b90508061148484896147bd565b61148e91906147dc565b95508061149b83896147bd565b6114a591906147dc565b9450505050505b94509492505050565b60008060006114c486866115bd565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160200161159b939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b600080826001600160a01b0316846001600160a01b0316141561162c5760405162461bcd60e51b815260206004820152602160248201527f426173655631526f757465723a204944454e544943414c5f41444452455353456044820152605360f81b60648201526084016106b9565b826001600160a01b0316846001600160a01b03161061164c57828461164f565b83835b90925090506001600160a01b0382166116aa5760405162461bcd60e51b815260206004820152601a60248201527f426173655631526f757465723a205a45524f5f4144445245535300000000000060448201526064016106b9565b9250929050565b600080600083428110156116d75760405162461bcd60e51b81526004016106b990614572565b6116e68d8d8d8d8d8d8d612cb4565b909450925060006116f88e8e8e6114b5565b90506117068e3383886128b1565b6117128d3383876128b1565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af115801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190614763565b9250505099509950999650505050505050565b60008060006117a2858560016114b5565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611812573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611836919061469c565b156118af576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190614763565b91505b6118bb878760006114b5565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a919061469c565b156119c3576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c09190614763565b90505b8082116119d2578060006119d6565b8160015b94509450505050935093915050565b60008060006119f486866115bd565b509050600080611a058888886114b5565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190614815565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b031614611a9d578082611aa0565b81815b90999098509650505050505050565b6000546001600160a01b03163314611ac657600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60608142811015611b0b5760405162461bcd60e51b81526004016106b990614572565b611b6186866000818110611b2157611b216145ce565b611b37926020606090920201908101915061412a565b33611b4e8989600081811061082d5761082d6145ce565b8a6000815181106108ac576108ac6145ce565b611bb3878787808060200260200160405190810160405280939291908181526020016000905b82821015610d4157611ba46060830286013681900381019061461b565b81526020019060010190611b87565b509495945050505050565b6060600182511015611be25760405162461bcd60e51b81526004016106b9906145e4565b8151611bef90600161485a565b67ffffffffffffffff811115611c0757611c07614147565b604051908082528060200260200182016040528015611c30578160200160208202803683370190505b5090508281600081518110611c4757611c476145ce565b60200260200101818152505060005b8251811015611e39576000611cb2848381518110611c7657611c766145ce565b602002602001015160000151858481518110611c9457611c946145ce565b602002602001015160200151868581518110611312576113126145ce565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d41919061469c565b15611e2657806001600160a01b031663f140a35a848481518110611d6757611d676145ce565b6020026020010151868581518110611d8157611d816145ce565b6020026020010151600001516040518363ffffffff1660e01b8152600401611dbc9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190614763565b83611e0984600161485a565b81518110611e1957611e196145ce565b6020026020010181815250505b5080611e3181614872565b915050611c56565b5092915050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611e969392919061477c565b602060405180830381865afa158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed791906147a0565b9050600080806001600160a01b03841615611f6157836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e9190614763565b9050611f5b8c8c8c6119e5565b90935091505b82158015611f6d575081155b15611f9e578896508795506103e8611f8d611f88888a6147bd565b612ed2565b611f9791906145b7565b9450612031565b6000611fab8a8585612f42565b9050888111611ff357899750955085611fec84611fc8848b6147bd565b611fd291906147dc565b84611fdd858b6147bd565b611fe791906147dc565b61301a565b955061202f565b60006120008a8587612f42565b985089975088905061202b8561201685846147bd565b61202091906147dc565b85611fdd868c6147bd565b9650505b505b50505050955095509592505050565b60008060006120508f8f8f6114b5565b905060008761205f578c612063565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf9061209e903390309086908f908e908e908e9060040161488d565b600060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b50505050506120e18f8f8f8f8f8f8f8f610d56565b8093508194505050509c509c9a5050505050505050505050565b600080824281101561211f5760405162461bcd60e51b81526004016106b990614572565b61214f8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b610d56565b909350915061215f8a8685613030565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b505050506121e38583612be6565b5097509795505050505050565b600080546001600160a01b03163314612231576000546040516374e0514b60e11b81523360048201526001600160a01b0390911660248201526044016106b9565b6001600160a01b039091166000908152600160208190526040909120805460ff1916909117905590565b600080600061228b8e7f00000000000000000000000000000000000000000000000000000000000000008f6114b5565b905060008761229a578c61229e565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906122d9903390309086908f908e908e908e9060040161488d565b600060405180830381600087803b1580156122f357600080fd5b505af1158015612307573d6000803e3d6000fd5b5050505061231a8f8f8f8f8f8f8f6120fb565b809450819550505050509b509b9950505050505050505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c3919061469c565b92915050565b606081428110156123ec5760405162461bcd60e51b81526004016106b990614572565b61243e888787808060200260200160405190810160405280939291908181526020016000905b828210156107985761242f6060830286013681900381019061461b565b81526020019060010190612412565b915086826001845161245091906145b7565b81518110612460576124606145ce565b602002602001015110156124865760405162461bcd60e51b81526004016106b990614637565b61249c86866000818110610800576108006145ce565b6109ec828787808060200260200160405190810160405280939291908181526020016000905b82821015610d41576124df6060830286013681900381019061461b565b815260200190600101906124c2565b6000806000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261255991908101906148fa565b905061258381604051806040016040528060068152602001656343414e544f60d01b81525061311f565b156125de577f000000000000000000000000000000000000000000000000000000000000000091506125d67f00000000000000000000000000000000000000000000000000000000000000006000613178565b949350505050565b836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561261c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264091906147a0565b91506126698160405180604001604052806005815260200164634e4f544560d81b81525061311f565b1561267f5750670de0b6b3a76400009392505050565b6126a6816040518060400160405280600581526020016418d554d11560da1b81525061311f565b80156126da5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b15612775576000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612743919061498e565b60ff16905061275381600a614a8f565b61276c906ec097ce7bc90715b34b9f10000000006147dc565b95945050505050565b61279c8160405180604001604052806005815260200164635553444360d81b81525061311f565b80156127d05750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b15612815576000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271f573d6000803e3d6000fd5b5061281f81612334565b156128345761282d816132d8565b9392505050565b6001600160a01b03811660009081526001602052604090205460ff16156128605761282d816001613178565b670de0b6b3a76400006128947f00000000000000000000000000000000000000000000000000000000000000006000613178565b61289d83613b2c565b6128a791906147bd565b61282d91906147dc565b6000846001600160a01b03163b1161290b5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20636f6465206c656e677468206661696c7572650000000000000060448201526064016106b9565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528591908216906323b872dd906064016020604051808303816000875af1158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612989919061469c565b505050505050565b60005b8251811015612be05760006129e38483815181106129b4576129b46145ce565b6020026020010151600001518584815181106129d2576129d26145ce565b6020026020010151602001516115bd565b5090506000856129f484600161485a565b81518110612a0457612a046145ce565b60200260200101519050600080836001600160a01b0316878681518110612a2d57612a2d6145ce565b6020026020010151600001516001600160a01b031614612a4f57826000612a53565b6000835b91509150600060018851612a6791906145b7565b8610612a735786612ae6565b612ae688612a8288600161485a565b81518110612a9257612a926145ce565b60200260200101516000015189886001612aac919061485a565b81518110612abc57612abc6145ce565b6020026020010151602001518a896001612ad6919061485a565b81518110611312576113126145ce565b9050612b39888781518110612afd57612afd6145ce565b602002602001015160000151898881518110612b1b57612b1b6145ce565b6020026020010151602001518a8981518110611312576113126145ce565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612b76576020820181803683370190505b506040518563ffffffff1660e01b8152600401612b969493929190614a9b565b600060405180830381600087803b158015612bb057600080fd5b505af1158015612bc4573d6000803e3d6000fd5b5050505050505050508080612bd890614872565b915050612994565b50505050565b604080516000808252602082019092526001600160a01b038416908390604051612c109190614aeb565b60006040518083038185875af1925050503d8060008114612c4d576040519150601f19603f3d011682016040523d82523d6000602084013e612c52565b606091505b5050905080612caf5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016106b9565b505050565b60008083861015612cc457600080fd5b82851015612cd157600080fd5b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc3090612d24908d908d908d9060040161477c565b602060405180830381865afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6591906147a0565b90506001600160a01b038116612e0b576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce490612dc5908d908d908d9060040161477c565b6020604051808303816000875af1158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0891906147a0565b90505b600080612e198c8c8c6119e5565b91509150816000148015612e2b575080155b15612e3b57889450879350612ec3565b6000612e488a8484612f42565b9050888111612e7c5786811015612e715760405162461bcd60e51b81526004016106b990614720565b899550935083612ec1565b6000612e898a8486612f42565b90508a811115612e9b57612e9b613c8a565b88811015612ebb5760405162461bcd60e51b81526004016106b9906146dd565b95508894505b505b50505097509795505050505050565b60006003821115612f335750806000612eec6002836147dc565b612ef790600161485a565b90505b81811015612f2d57905080600281612f1281866147dc565b612f1c919061485a565b612f2691906147dc565b9050612efa565b50919050565b8115612f3d575060015b919050565b6000808411612f9d5760405162461bcd60e51b815260206004820152602160248201527f426173655631526f757465723a20494e53554646494349454e545f414d4f554e6044820152601560fa1b60648201526084016106b9565b600083118015612fad5750600082115b6130055760405162461bcd60e51b8152602060048201526024808201527f426173655631526f757465723a20494e53554646494349454e545f4c495155496044820152634449545960e01b60648201526084016106b9565b8261301083866147bd565b6125d691906147dc565b6000818310613029578161282d565b5090919050565b6000836001600160a01b03163b1161304757600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916130a39190614aeb565b6000604051808303816000865af19150503d80600081146130e0576040519150601f19603f3d011682016040523d82523d6000602084013e6130e5565b606091505b509150915081801561310f57508051158061310f57508080602001905181019061310f919061469c565b61311857600080fd5b5050505050565b6000816040516020016131329190614aeb565b60405160208183030381529060405280519060200120836040516020016131599190614aeb565b6040516020818303038152906040528051906020012014905092915050565b600082816131a77f000000000000000000000000000000000000000000000000000000000000000083866114b5565b90506131b281612334565b6131c1576000925050506123c3565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613201573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613225919061498e565b61323090600a614b07565b604051639e8cc04b60e01b81526001600160a01b0385811660048301526024820183905260086044830152919250600091841690639e8cc04b90606401602060405180830381865afa15801561328a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ae9190614763565b9050816132c382670de0b6b3a76400006147bd565b6132cd91906147dc565b979650505050505050565b60405163eba6aef960e01b8152600860048201526001602482015260009081906001600160a01b0384169063eba6aef990604401600060405180830381865afa158015613329573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133519190810190614b71565b905060608060606000866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bc91906147a0565b90506000876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342291906147a0565b90506000886001600160a01b03166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613488919061469c565b1561379a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561363157816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613529919061498e565b61353490600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe19061356b9085908590600890600190600401614ba6565b600060405180830381865afa158015613588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135b09190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa1580156135ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136279190810190614bcc565b9095509350613977565b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561366f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613693919061498e565b61369e90600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe1906136d59086908590600890600190600401614ba6565b600060405180830381865afa1580156136f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261371a9190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa158015613769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137919190810190614bcc565b95509350613977565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561381257816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613505573d6000803e3d6000fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613850573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613874919061498e565b61387f90600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe1906138b69086908590600890600190600401614ba6565b600060405180830381865afa1580156138d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138fb9190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa15801561394a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139729190810190614bcc565b955093505b6000805b6008811015613a5057600083898381518110613999576139996145ce565b60200260200101516139ab91906147dc565b8783815181106139bd576139bd6145ce565b60200260200101516139cf91906147bd565b905060008883815181106139e5576139e56145ce565b602002602001015190508a8381518110613a0157613a016145ce565b60200260200101518183613a15919061485a565b613a2790670de0b6b3a76400006147bd565b613a3191906147dc565b613a3b908561485a565b9350505080613a4990614872565b905061397b565b506000613a5e6008836147dc565b90508a6001600160a01b03166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac2919061469c565b15613ad5579a9950505050505050505050565b670de0b6b3a7640000613b097f00000000000000000000000000000000000000000000000000000000000000006000613178565b613b1390836147bd565b613b1d91906147dc565b9b9a5050505050505050505050565b60008181613b5b7f000000000000000000000000000000000000000000000000000000000000000083836114b5565b9050613b6681612334565b613b74575060009392505050565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd8919061498e565b613be390600a614b07565b604051639e8cc04b60e01b81526001600160a01b0385811660048301526024820183905260086044830152919250600091841690639e8cc04b90606401602060405180830381865afa158015613c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c619190614763565b905081613c7682670de0b6b3a76400006147bd565b613c8091906147dc565b9695505050505050565b634e487b7160e01b600052600160045260246000fd5b60008083601f840112613cb257600080fd5b50813567ffffffffffffffff811115613cca57600080fd5b6020830191508360206060830285010111156116aa57600080fd5b6001600160a01b0381168114613cfa57600080fd5b50565b8035612f3d81613ce5565b60008060008060008060a08789031215613d2157600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613d4657600080fd5b613d5289828a01613ca0565b9095509350506060870135613d6681613ce5565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613db357835183529284019291840191600101613d97565b50909695505050505050565b600080600080600060808688031215613dd757600080fd5b85359450602086013567ffffffffffffffff811115613df557600080fd5b613e0188828901613ca0565b9095509350506040860135613e1581613ce5565b949793965091946060013592915050565b8015158114613cfa57600080fd5b600080600080600080600080610100898b031215613e5157600080fd5b8835613e5c81613ce5565b97506020890135613e6c81613ce5565b96506040890135613e7c81613e26565b9550606089013594506080890135935060a0890135925060c0890135613ea181613ce5565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215613ed457600080fd5b8735613edf81613ce5565b96506020880135613eef81613e26565b955060408801359450606088013593506080880135925060a0880135613f1481613ce5565b8092505060c0880135905092959891949750929550565b600080600080600080600060e0888a031215613f4657600080fd5b87359650602088013595506040880135613f5f81613ce5565b94506060880135613f6f81613ce5565b93506080880135613f7f81613e26565b925060a0880135613f1481613ce5565b60008060008060808587031215613fa557600080fd5b8435613fb081613ce5565b93506020850135613fc081613ce5565b92506040850135613fd081613e26565b9396929550929360600135925050565b600080600060608486031215613ff557600080fd5b833561400081613ce5565b9250602084013561401081613ce5565b9150604084013561402081613e26565b809150509250925092565b6000806040838503121561403e57600080fd5b823561404981613ce5565b9150602083013561405981613ce5565b809150509250929050565b60008060008060008060008060006101208a8c03121561408357600080fd5b893561408e81613ce5565b985060208a013561409e81613ce5565b975060408a01356140ae81613e26565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356140da81613ce5565b809250506101008a013590509295985092959850929598565b60008060006060848603121561410857600080fd5b83359250602084013561411a81613ce5565b9150604084013561402081613ce5565b60006020828403121561413c57600080fd5b813561282d81613ce5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561418657614186614147565b604052919050565b600067ffffffffffffffff8211156141a8576141a8614147565b5060051b60200190565b6000806000806000608086880312156141ca57600080fd5b853567ffffffffffffffff808211156141e257600080fd5b818801915088601f8301126141f657600080fd5b8135602061420b6142068361418e565b61415d565b82815260059290921b8401810191818101908c84111561422a57600080fd5b948201945b838610156142485785358252948201949082019061422f565b9950508901359250508082111561425e57600080fd5b5061426b88828901613ca0565b9095509350613e15905060408701613cfd565b60006060828403121561429057600080fd5b6040516060810181811067ffffffffffffffff821117156142b3576142b3614147565b60405290508082356142c481613ce5565b815260208301356142d481613ce5565b602082015260408301356142e781613e26565b6040919091015292915050565b6000806040838503121561430757600080fd5b8235915060208084013567ffffffffffffffff81111561432657600080fd5b8401601f8101861361433757600080fd5b80356143456142068261418e565b8181526060918202830184019184820191908984111561436457600080fd5b938501935b8385101561438a5761437b8a8661427e565b83529384019391850191614369565b5080955050505050509250929050565b600080600080600060a086880312156143b257600080fd5b85356143bd81613ce5565b945060208601356143cd81613ce5565b935060408601356143dd81613e26565b94979396509394606081013594506080013592915050565b60ff81168114613cfa57600080fd5b6000806000806000806000806000806000806101808d8f03121561442757600080fd5b8c3561443281613ce5565b9b5060208d013561444281613ce5565b9a5060408d013561445281613e26565b995060608d0135985060808d0135975060a08d0135965060c08d013561447781613ce5565b955060e08d013594506101008d013561448f81613e26565b93506101208d01356144a0816143f5565b809350506101408d013591506101608d013590509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e0312156144e657600080fd5b8b356144f181613ce5565b9a5060208c013561450181613e26565b995060408c0135985060608c0135975060808c0135965060a08c013561452681613ce5565b955060c08c0135945060e08c013561453d81613e26565b93506101008c013561454e816143f5565b809350506101208c013591506101408c013590509295989b509295989b9093969950565b60208082526015908201527410985cd9558c549bdd5d195c8e8811561412549151605a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156145c9576145c96145a1565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f426173655631526f757465723a20494e56414c49445f50415448000000000000604082015260600190565b60006060828403121561462d57600080fd5b61282d838361427e565b60208082526028908201527f426173655631526f757465723a20494e53554646494349454e545f4f555450556040820152671517d05353d5539560c21b606082015260800190565b60006020828403121561469157600080fd5b813561282d81613e26565b6000602082840312156146ae57600080fd5b815161282d81613e26565b600080604083850312156146cc57600080fd5b505080516020909101519092909150565b60208082526023908201527f426173655631526f757465723a20494e53554646494349454e545f415f414d4f60408201526215539560ea1b606082015260800190565b60208082526023908201527f426173655631526f757465723a20494e53554646494349454e545f425f414d4f60408201526215539560ea1b606082015260800190565b60006020828403121561477557600080fd5b5051919050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6000602082840312156147b257600080fd5b815161282d81613ce5565b60008160001904831182151516156147d7576147d76145a1565b500290565b6000826147f957634e487b7160e01b600052601260045260246000fd5b500490565b80516001600160701b0381168114612f3d57600080fd5b60008060006060848603121561482a57600080fd5b614833846147fe565b9250614841602085016147fe565b9150604084015163ffffffff8116811461402057600080fd5b6000821982111561486d5761486d6145a1565b500190565b6000600019821415614886576148866145a1565b5060010190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b838110156148e95781810151838201526020016148d1565b83811115612be05750506000910152565b60006020828403121561490c57600080fd5b815167ffffffffffffffff8082111561492457600080fd5b818401915084601f83011261493857600080fd5b81518181111561494a5761494a614147565b61495d601f8201601f191660200161415d565b915080825285602082850101111561497457600080fd5b6149858160208401602086016148ce565b50949350505050565b6000602082840312156149a057600080fd5b815161282d816143f5565b600181815b808511156149e65781600019048211156149cc576149cc6145a1565b808516156149d957918102915b93841c93908002906149b0565b509250929050565b6000826149fd575060016123c3565b81614a0a575060006123c3565b8160018114614a205760028114614a2a57614a46565b60019150506123c3565b60ff841115614a3b57614a3b6145a1565b50506001821b6123c3565b5060208310610133831016604e8410600b8410161715614a69575081810a6123c3565b614a7383836149ab565b8060001904821115614a8757614a876145a1565b029392505050565b600061282d83836149ee565b84815283602082015260018060a01b03831660408201526080606082015260008251806080840152614ad48160a08501602087016148ce565b601f01601f19169190910160a00195945050505050565b60008251614afd8184602087016148ce565b9190910192915050565b600061282d60ff8416836149ee565b600082601f830112614b2757600080fd5b81516020614b376142068361418e565b82815260059290921b84018101918181019086841115614b5657600080fd5b8286015b848110156109ec5780518352918301918301614b5a565b600060208284031215614b8357600080fd5b815167ffffffffffffffff811115614b9a57600080fd5b6125d684828501614b16565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008060408385031215614bdf57600080fd5b825167ffffffffffffffff80821115614bf757600080fd5b614c0386838701614b16565b93506020850151915080821115614c1957600080fd5b50614c2685828601614b16565b915050925092905056fea2646970667358221220aa1ad52c3b24dac45c1cfc3ed05ab7b6edadcebdf435f7b6e141be2763213b6e64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c8063704b6c02116100f7578063c45a015511610095578063e5e31b1311610064578063e5e31b1314610616578063f41766d814610636578063f851a44014610656578063fc57d4df1461067657600080fd5b8063c45a015514610574578063c79db9d7146105a8578063dba71376146105c8578063dd54e2a4146105f657600080fd5b80639185f6ec116100d15780639185f6ec146104e45780639881fcb41461051457806398a0fb3c14610534578063a32b1fcd1461055457600080fd5b8063704b6c02146104705780637301e3c8146104905780637aa497d9146104b057600080fd5b80634ae36e8e116101645780635a47ddc31161013e5780635a47ddc3146103d65780635e1e6325146103f65780635e60dab51461042b57806366331bba1461044b57600080fd5b80634ae36e8e146103425780634c1ee03e14610376578063544caa561461039657600080fd5b8063116e4ea3116101a0578063116e4ea31461028857806313dcfc59146102b657806326d111f5146102d65780634386e63c1461032257600080fd5b80630483e3cc1461020a578063058e200a146102405780630dede6c41461025357600080fd5b3661020557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461020357610203613c8a565b005b600080fd5b34801561021657600080fd5b5061022a610225366004613d08565b610696565b6040516102379190613d7b565b60405180910390f35b61022a61024e366004613dbf565b6109f7565b34801561025f57600080fd5b5061027361026e366004613e34565b610d56565b60408051928352602083019190915201610237565b61029b610296366004613eb9565b610f07565b60408051938452602084019290925290820152606001610237565b3480156102c257600080fd5b5061022a6102d1366004613f2b565b611148565b3480156102e257600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610237565b34801561032e57600080fd5b5061027361033d366004613f8f565b61134e565b34801561034e57600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038257600080fd5b5061030a610391366004613fe0565b6114b5565b3480156103a257600080fd5b506103b66103b136600461402b565b6115bd565b604080516001600160a01b03938416815292909116602083015201610237565b3480156103e257600080fd5b5061029b6103f1366004614064565b6116b1565b34801561040257600080fd5b506104166104113660046140f3565b611791565b60408051928352901515602083015201610237565b34801561043757600080fd5b50610273610446366004613fe0565b6119e5565b34801561045757600080fd5b50610460600181565b6040519015158152602001610237565b34801561047c57600080fd5b5061020361048b36600461412a565b611aaf565b34801561049c57600080fd5b5061022a6104ab3660046141b2565b611ae8565b3480156104bc57600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f057600080fd5b506104606104ff36600461412a565b60016020526000908152604090205460ff1681565b34801561052057600080fd5b5061022a61052f3660046142f4565b611bbe565b34801561054057600080fd5b5061029b61054f36600461439a565b611e40565b34801561056057600080fd5b5061027361056f366004614404565b612040565b34801561058057600080fd5b5061030a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b457600080fd5b506102736105c3366004613eb9565b6120fb565b3480156105d457600080fd5b506105e86105e336600461412a565b6121f0565b604051908152602001610237565b34801561060257600080fd5b506102736106113660046144c4565b61225b565b34801561062257600080fd5b5061046061063136600461412a565b612334565b34801561064257600080fd5b5061022a610651366004613d08565b6123c9565b34801561066257600080fd5b5060005461030a906001600160a01b031681565b34801561068257600080fd5b506105e861069136600461412a565b6124ee565b606081428110156106c25760405162461bcd60e51b81526004016106b990614572565b60405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866106f96001826145b7565b818110610708576107086145ce565b9050606002016020016020810190610720919061412a565b6001600160a01b0316146107465760405162461bcd60e51b81526004016106b9906145e4565b6107a2888787808060200260200160405190810160405280939291908181526020016000905b82821015610798576107896060830286013681900381019061461b565b8152602001906001019061076c565b5050505050611bbe565b91508682600184516107b491906145b7565b815181106107c4576107c46145ce565b602002602001015110156107ea5760405162461bcd60e51b81526004016106b990614637565b6108b986866000818110610800576108006145ce565b610816926020606090920201908101915061412a565b336108998989600081811061082d5761082d6145ce565b610843926020606090920201908101915061412a565b8a8a6000818110610856576108566145ce565b905060600201602001602081019061086e919061412a565b8b8b6000818110610881576108816145ce565b9050606002016040016020810190610391919061467f565b856000815181106108ac576108ac6145ce565b60200260200101516128b1565b610916828787808060200260200160405190810160405280939291908181526020016000905b8282101561090b576108fc6060830286013681900381019061461b565b815260200190600101906108df565b505050505030612991565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161095491906145b7565b81518110610964576109646145ce565b60200260200101516040518263ffffffff1660e01b815260040161098a91815260200190565b600060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b505050506109ec8483600185516109cf91906145b7565b815181106109df576109df6145ce565b6020026020010151612be6565b509695505050505050565b60608142811015610a1a5760405162461bcd60e51b81526004016106b990614572565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610a5757610a576145ce565b610a6d926020606090920201908101915061412a565b6001600160a01b031614610a935760405162461bcd60e51b81526004016106b9906145e4565b610ae5348787808060200260200160405190810160405280939291908181526020016000905b8282101561079857610ad66060830286013681900381019061461b565b81526020019060010190610ab9565b9150868260018451610af791906145b7565b81518110610b0757610b076145ce565b60200260200101511015610b2d5760405162461bcd60e51b81526004016106b990614637565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610b6f57610b6f6145ce565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610c5488886000818110610c0057610c006145ce565b610c16926020606090920201908101915061412a565b89896000818110610c2957610c296145ce565b9050606002016020016020810190610c41919061412a565b8a8a6000818110610881576108816145ce565b84600081518110610c6757610c676145ce565b60200260200101516040518363ffffffff1660e01b8152600401610ca09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce3919061469c565b610cef57610cef613c8a565b610d4c828787808060200260200160405190810160405280939291908181526020016000905b82821015610d4157610d326060830286013681900381019061461b565b81526020019060010190610d15565b505050505086612991565b5095945050505050565b6000808242811015610d7a5760405162461bcd60e51b81526004016106b990614572565b6000610d878c8c8c6114b5565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e01919061469c565b610e0a57600080fd5b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a91906146b9565b915091506000610e8a8f8f6115bd565b509050806001600160a01b03168f6001600160a01b031614610ead578183610eb0565b82825b90975095508a871015610ed55760405162461bcd60e51b81526004016106b9906146dd565b89861015610ef55760405162461bcd60e51b81526004016106b990614720565b50505050509850989650505050505050565b60008060008342811015610f2d5760405162461bcd60e51b81526004016106b990614572565b610f5c8b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d612cb4565b90945092506000610f8e8c7f00000000000000000000000000000000000000000000000000000000000000008d6114b5565b9050610f9c8c3383886128b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a4919061469c565b6110b0576110b0613c8a565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156110f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111c9190614763565b925083341115611139576111393361113486346145b7565b612be6565b50509750975097945050505050565b6060814281101561116b5760405162461bcd60e51b81526004016106b990614572565b604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161118257905050905087816000815181106111c5576111c56145ce565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106111fd576111fd6145ce565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600081518110611235576112356145ce565b60209081029190910101519015156040909101526112538a82611bbe565b925088836001855161126591906145b7565b81518110611275576112756145ce565b6020026020010151101561129b5760405162461bcd60e51b81526004016106b990614637565b611336816000815181106112b1576112b16145ce565b60200260200101516000015133611323846000815181106112d4576112d46145ce565b602002602001015160000151856000815181106112f3576112f36145ce565b60200260200101516020015186600081518110611312576113126145ce565b6020026020010151604001516114b5565b866000815181106108ac576108ac6145ce565b611341838287612991565b5050979650505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b81526004016113a39392919061477c565b602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906147a0565b90506001600160a01b0381166114015760008092509250506114ac565b60008061140f8989896119e5565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114779190614763565b90508061148484896147bd565b61148e91906147dc565b95508061149b83896147bd565b6114a591906147dc565b9450505050505b94509492505050565b60008060006114c486866115bd565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160200161159b939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b600080826001600160a01b0316846001600160a01b0316141561162c5760405162461bcd60e51b815260206004820152602160248201527f426173655631526f757465723a204944454e544943414c5f41444452455353456044820152605360f81b60648201526084016106b9565b826001600160a01b0316846001600160a01b03161061164c57828461164f565b83835b90925090506001600160a01b0382166116aa5760405162461bcd60e51b815260206004820152601a60248201527f426173655631526f757465723a205a45524f5f4144445245535300000000000060448201526064016106b9565b9250929050565b600080600083428110156116d75760405162461bcd60e51b81526004016106b990614572565b6116e68d8d8d8d8d8d8d612cb4565b909450925060006116f88e8e8e6114b5565b90506117068e3383886128b1565b6117128d3383876128b1565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af115801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177e9190614763565b9250505099509950999650505050505050565b60008060006117a2858560016114b5565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611812573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611836919061469c565b156118af576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190614763565b91505b6118bb878760006114b5565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a919061469c565b156119c3576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c09190614763565b90505b8082116119d2578060006119d6565b8160015b94509450505050935093915050565b60008060006119f486866115bd565b509050600080611a058888886114b5565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190614815565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b031614611a9d578082611aa0565b81815b90999098509650505050505050565b6000546001600160a01b03163314611ac657600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60608142811015611b0b5760405162461bcd60e51b81526004016106b990614572565b611b6186866000818110611b2157611b216145ce565b611b37926020606090920201908101915061412a565b33611b4e8989600081811061082d5761082d6145ce565b8a6000815181106108ac576108ac6145ce565b611bb3878787808060200260200160405190810160405280939291908181526020016000905b82821015610d4157611ba46060830286013681900381019061461b565b81526020019060010190611b87565b509495945050505050565b6060600182511015611be25760405162461bcd60e51b81526004016106b9906145e4565b8151611bef90600161485a565b67ffffffffffffffff811115611c0757611c07614147565b604051908082528060200260200182016040528015611c30578160200160208202803683370190505b5090508281600081518110611c4757611c476145ce565b60200260200101818152505060005b8251811015611e39576000611cb2848381518110611c7657611c766145ce565b602002602001015160000151858481518110611c9457611c946145ce565b602002602001015160200151868581518110611312576113126145ce565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d41919061469c565b15611e2657806001600160a01b031663f140a35a848481518110611d6757611d676145ce565b6020026020010151868581518110611d8157611d816145ce565b6020026020010151600001516040518363ffffffff1660e01b8152600401611dbc9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190614763565b83611e0984600161485a565b81518110611e1957611e196145ce565b6020026020010181815250505b5080611e3181614872565b915050611c56565b5092915050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611e969392919061477c565b602060405180830381865afa158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed791906147a0565b9050600080806001600160a01b03841615611f6157836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e9190614763565b9050611f5b8c8c8c6119e5565b90935091505b82158015611f6d575081155b15611f9e578896508795506103e8611f8d611f88888a6147bd565b612ed2565b611f9791906145b7565b9450612031565b6000611fab8a8585612f42565b9050888111611ff357899750955085611fec84611fc8848b6147bd565b611fd291906147dc565b84611fdd858b6147bd565b611fe791906147dc565b61301a565b955061202f565b60006120008a8587612f42565b985089975088905061202b8561201685846147bd565b61202091906147dc565b85611fdd868c6147bd565b9650505b505b50505050955095509592505050565b60008060006120508f8f8f6114b5565b905060008761205f578c612063565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf9061209e903390309086908f908e908e908e9060040161488d565b600060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b50505050506120e18f8f8f8f8f8f8f8f610d56565b8093508194505050509c509c9a5050505050505050505050565b600080824281101561211f5760405162461bcd60e51b81526004016106b990614572565b61214f8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b610d56565b909350915061215f8a8685613030565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b505050506121e38583612be6565b5097509795505050505050565b600080546001600160a01b03163314612231576000546040516374e0514b60e11b81523360048201526001600160a01b0390911660248201526044016106b9565b6001600160a01b039091166000908152600160208190526040909120805460ff1916909117905590565b600080600061228b8e7f00000000000000000000000000000000000000000000000000000000000000008f6114b5565b905060008761229a578c61229e565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906122d9903390309086908f908e908e908e9060040161488d565b600060405180830381600087803b1580156122f357600080fd5b505af1158015612307573d6000803e3d6000fd5b5050505061231a8f8f8f8f8f8f8f6120fb565b809450819550505050509b509b9950505050505050505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c3919061469c565b92915050565b606081428110156123ec5760405162461bcd60e51b81526004016106b990614572565b61243e888787808060200260200160405190810160405280939291908181526020016000905b828210156107985761242f6060830286013681900381019061461b565b81526020019060010190612412565b915086826001845161245091906145b7565b81518110612460576124606145ce565b602002602001015110156124865760405162461bcd60e51b81526004016106b990614637565b61249c86866000818110610800576108006145ce565b6109ec828787808060200260200160405190810160405280939291908181526020016000905b82821015610d41576124df6060830286013681900381019061461b565b815260200190600101906124c2565b6000806000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261255991908101906148fa565b905061258381604051806040016040528060068152602001656343414e544f60d01b81525061311f565b156125de577f000000000000000000000000000000000000000000000000000000000000000091506125d67f00000000000000000000000000000000000000000000000000000000000000006000613178565b949350505050565b836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561261c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264091906147a0565b91506126698160405180604001604052806005815260200164634e4f544560d81b81525061311f565b1561267f5750670de0b6b3a76400009392505050565b6126a6816040518060400160405280600581526020016418d554d11560da1b81525061311f565b80156126da5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b15612775576000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612743919061498e565b60ff16905061275381600a614a8f565b61276c906ec097ce7bc90715b34b9f10000000006147dc565b95945050505050565b61279c8160405180604001604052806005815260200164635553444360d81b81525061311f565b80156127d05750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b15612815576000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271f573d6000803e3d6000fd5b5061281f81612334565b156128345761282d816132d8565b9392505050565b6001600160a01b03811660009081526001602052604090205460ff16156128605761282d816001613178565b670de0b6b3a76400006128947f00000000000000000000000000000000000000000000000000000000000000006000613178565b61289d83613b2c565b6128a791906147bd565b61282d91906147dc565b6000846001600160a01b03163b1161290b5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20636f6465206c656e677468206661696c7572650000000000000060448201526064016106b9565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528591908216906323b872dd906064016020604051808303816000875af1158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612989919061469c565b505050505050565b60005b8251811015612be05760006129e38483815181106129b4576129b46145ce565b6020026020010151600001518584815181106129d2576129d26145ce565b6020026020010151602001516115bd565b5090506000856129f484600161485a565b81518110612a0457612a046145ce565b60200260200101519050600080836001600160a01b0316878681518110612a2d57612a2d6145ce565b6020026020010151600001516001600160a01b031614612a4f57826000612a53565b6000835b91509150600060018851612a6791906145b7565b8610612a735786612ae6565b612ae688612a8288600161485a565b81518110612a9257612a926145ce565b60200260200101516000015189886001612aac919061485a565b81518110612abc57612abc6145ce565b6020026020010151602001518a896001612ad6919061485a565b81518110611312576113126145ce565b9050612b39888781518110612afd57612afd6145ce565b602002602001015160000151898881518110612b1b57612b1b6145ce565b6020026020010151602001518a8981518110611312576113126145ce565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612b76576020820181803683370190505b506040518563ffffffff1660e01b8152600401612b969493929190614a9b565b600060405180830381600087803b158015612bb057600080fd5b505af1158015612bc4573d6000803e3d6000fd5b5050505050505050508080612bd890614872565b915050612994565b50505050565b604080516000808252602082019092526001600160a01b038416908390604051612c109190614aeb565b60006040518083038185875af1925050503d8060008114612c4d576040519150601f19603f3d011682016040523d82523d6000602084013e612c52565b606091505b5050905080612caf5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016106b9565b505050565b60008083861015612cc457600080fd5b82851015612cd157600080fd5b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc3090612d24908d908d908d9060040161477c565b602060405180830381865afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6591906147a0565b90506001600160a01b038116612e0b576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce490612dc5908d908d908d9060040161477c565b6020604051808303816000875af1158015612de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0891906147a0565b90505b600080612e198c8c8c6119e5565b91509150816000148015612e2b575080155b15612e3b57889450879350612ec3565b6000612e488a8484612f42565b9050888111612e7c5786811015612e715760405162461bcd60e51b81526004016106b990614720565b899550935083612ec1565b6000612e898a8486612f42565b90508a811115612e9b57612e9b613c8a565b88811015612ebb5760405162461bcd60e51b81526004016106b9906146dd565b95508894505b505b50505097509795505050505050565b60006003821115612f335750806000612eec6002836147dc565b612ef790600161485a565b90505b81811015612f2d57905080600281612f1281866147dc565b612f1c919061485a565b612f2691906147dc565b9050612efa565b50919050565b8115612f3d575060015b919050565b6000808411612f9d5760405162461bcd60e51b815260206004820152602160248201527f426173655631526f757465723a20494e53554646494349454e545f414d4f554e6044820152601560fa1b60648201526084016106b9565b600083118015612fad5750600082115b6130055760405162461bcd60e51b8152602060048201526024808201527f426173655631526f757465723a20494e53554646494349454e545f4c495155496044820152634449545960e01b60648201526084016106b9565b8261301083866147bd565b6125d691906147dc565b6000818310613029578161282d565b5090919050565b6000836001600160a01b03163b1161304757600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916130a39190614aeb565b6000604051808303816000865af19150503d80600081146130e0576040519150601f19603f3d011682016040523d82523d6000602084013e6130e5565b606091505b509150915081801561310f57508051158061310f57508080602001905181019061310f919061469c565b61311857600080fd5b5050505050565b6000816040516020016131329190614aeb565b60405160208183030381529060405280519060200120836040516020016131599190614aeb565b6040516020818303038152906040528051906020012014905092915050565b600082816131a77f000000000000000000000000000000000000000000000000000000000000000083866114b5565b90506131b281612334565b6131c1576000925050506123c3565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613201573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613225919061498e565b61323090600a614b07565b604051639e8cc04b60e01b81526001600160a01b0385811660048301526024820183905260086044830152919250600091841690639e8cc04b90606401602060405180830381865afa15801561328a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ae9190614763565b9050816132c382670de0b6b3a76400006147bd565b6132cd91906147dc565b979650505050505050565b60405163eba6aef960e01b8152600860048201526001602482015260009081906001600160a01b0384169063eba6aef990604401600060405180830381865afa158015613329573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133519190810190614b71565b905060608060606000866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bc91906147a0565b90506000876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342291906147a0565b90506000886001600160a01b03166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613488919061469c565b1561379a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561363157816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613529919061498e565b61353490600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe19061356b9085908590600890600190600401614ba6565b600060405180830381865afa158015613588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135b09190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa1580156135ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136279190810190614bcc565b9095509350613977565b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561366f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613693919061498e565b61369e90600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe1906136d59086908590600890600190600401614ba6565b600060405180830381865afa1580156136f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261371a9190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa158015613769573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137919190810190614bcc565b95509350613977565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561381257816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613505573d6000803e3d6000fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613850573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613874919061498e565b61387f90600a614b07565b6040516313345fe160e01b81529091506001600160a01b038a16906313345fe1906138b69086908590600890600190600401614ba6565b600060405180830381865afa1580156138d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138fb9190810190614b71565b604051637ccfa8d360e11b815260086004820152600160248201529096506001600160a01b038a169063f99f51a690604401600060405180830381865afa15801561394a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139729190810190614bcc565b955093505b6000805b6008811015613a5057600083898381518110613999576139996145ce565b60200260200101516139ab91906147dc565b8783815181106139bd576139bd6145ce565b60200260200101516139cf91906147bd565b905060008883815181106139e5576139e56145ce565b602002602001015190508a8381518110613a0157613a016145ce565b60200260200101518183613a15919061485a565b613a2790670de0b6b3a76400006147bd565b613a3191906147dc565b613a3b908561485a565b9350505080613a4990614872565b905061397b565b506000613a5e6008836147dc565b90508a6001600160a01b03166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac2919061469c565b15613ad5579a9950505050505050505050565b670de0b6b3a7640000613b097f00000000000000000000000000000000000000000000000000000000000000006000613178565b613b1390836147bd565b613b1d91906147dc565b9b9a5050505050505050505050565b60008181613b5b7f000000000000000000000000000000000000000000000000000000000000000083836114b5565b9050613b6681612334565b613b74575060009392505050565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd8919061498e565b613be390600a614b07565b604051639e8cc04b60e01b81526001600160a01b0385811660048301526024820183905260086044830152919250600091841690639e8cc04b90606401602060405180830381865afa158015613c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c619190614763565b905081613c7682670de0b6b3a76400006147bd565b613c8091906147dc565b9695505050505050565b634e487b7160e01b600052600160045260246000fd5b60008083601f840112613cb257600080fd5b50813567ffffffffffffffff811115613cca57600080fd5b6020830191508360206060830285010111156116aa57600080fd5b6001600160a01b0381168114613cfa57600080fd5b50565b8035612f3d81613ce5565b60008060008060008060a08789031215613d2157600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613d4657600080fd5b613d5289828a01613ca0565b9095509350506060870135613d6681613ce5565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613db357835183529284019291840191600101613d97565b50909695505050505050565b600080600080600060808688031215613dd757600080fd5b85359450602086013567ffffffffffffffff811115613df557600080fd5b613e0188828901613ca0565b9095509350506040860135613e1581613ce5565b949793965091946060013592915050565b8015158114613cfa57600080fd5b600080600080600080600080610100898b031215613e5157600080fd5b8835613e5c81613ce5565b97506020890135613e6c81613ce5565b96506040890135613e7c81613e26565b9550606089013594506080890135935060a0890135925060c0890135613ea181613ce5565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215613ed457600080fd5b8735613edf81613ce5565b96506020880135613eef81613e26565b955060408801359450606088013593506080880135925060a0880135613f1481613ce5565b8092505060c0880135905092959891949750929550565b600080600080600080600060e0888a031215613f4657600080fd5b87359650602088013595506040880135613f5f81613ce5565b94506060880135613f6f81613ce5565b93506080880135613f7f81613e26565b925060a0880135613f1481613ce5565b60008060008060808587031215613fa557600080fd5b8435613fb081613ce5565b93506020850135613fc081613ce5565b92506040850135613fd081613e26565b9396929550929360600135925050565b600080600060608486031215613ff557600080fd5b833561400081613ce5565b9250602084013561401081613ce5565b9150604084013561402081613e26565b809150509250925092565b6000806040838503121561403e57600080fd5b823561404981613ce5565b9150602083013561405981613ce5565b809150509250929050565b60008060008060008060008060006101208a8c03121561408357600080fd5b893561408e81613ce5565b985060208a013561409e81613ce5565b975060408a01356140ae81613e26565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356140da81613ce5565b809250506101008a013590509295985092959850929598565b60008060006060848603121561410857600080fd5b83359250602084013561411a81613ce5565b9150604084013561402081613ce5565b60006020828403121561413c57600080fd5b813561282d81613ce5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561418657614186614147565b604052919050565b600067ffffffffffffffff8211156141a8576141a8614147565b5060051b60200190565b6000806000806000608086880312156141ca57600080fd5b853567ffffffffffffffff808211156141e257600080fd5b818801915088601f8301126141f657600080fd5b8135602061420b6142068361418e565b61415d565b82815260059290921b8401810191818101908c84111561422a57600080fd5b948201945b838610156142485785358252948201949082019061422f565b9950508901359250508082111561425e57600080fd5b5061426b88828901613ca0565b9095509350613e15905060408701613cfd565b60006060828403121561429057600080fd5b6040516060810181811067ffffffffffffffff821117156142b3576142b3614147565b60405290508082356142c481613ce5565b815260208301356142d481613ce5565b602082015260408301356142e781613e26565b6040919091015292915050565b6000806040838503121561430757600080fd5b8235915060208084013567ffffffffffffffff81111561432657600080fd5b8401601f8101861361433757600080fd5b80356143456142068261418e565b8181526060918202830184019184820191908984111561436457600080fd5b938501935b8385101561438a5761437b8a8661427e565b83529384019391850191614369565b5080955050505050509250929050565b600080600080600060a086880312156143b257600080fd5b85356143bd81613ce5565b945060208601356143cd81613ce5565b935060408601356143dd81613e26565b94979396509394606081013594506080013592915050565b60ff81168114613cfa57600080fd5b6000806000806000806000806000806000806101808d8f03121561442757600080fd5b8c3561443281613ce5565b9b5060208d013561444281613ce5565b9a5060408d013561445281613e26565b995060608d0135985060808d0135975060a08d0135965060c08d013561447781613ce5565b955060e08d013594506101008d013561448f81613e26565b93506101208d01356144a0816143f5565b809350506101408d013591506101608d013590509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e0312156144e657600080fd5b8b356144f181613ce5565b9a5060208c013561450181613e26565b995060408c0135985060608c0135975060808c0135965060a08c013561452681613ce5565b955060c08c0135945060e08c013561453d81613e26565b93506101008c013561454e816143f5565b809350506101208c013591506101408c013590509295989b509295989b9093969950565b60208082526015908201527410985cd9558c549bdd5d195c8e8811561412549151605a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156145c9576145c96145a1565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f426173655631526f757465723a20494e56414c49445f50415448000000000000604082015260600190565b60006060828403121561462d57600080fd5b61282d838361427e565b60208082526028908201527f426173655631526f757465723a20494e53554646494349454e545f4f555450556040820152671517d05353d5539560c21b606082015260800190565b60006020828403121561469157600080fd5b813561282d81613e26565b6000602082840312156146ae57600080fd5b815161282d81613e26565b600080604083850312156146cc57600080fd5b505080516020909101519092909150565b60208082526023908201527f426173655631526f757465723a20494e53554646494349454e545f415f414d4f60408201526215539560ea1b606082015260800190565b60208082526023908201527f426173655631526f757465723a20494e53554646494349454e545f425f414d4f60408201526215539560ea1b606082015260800190565b60006020828403121561477557600080fd5b5051919050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6000602082840312156147b257600080fd5b815161282d81613ce5565b60008160001904831182151516156147d7576147d76145a1565b500290565b6000826147f957634e487b7160e01b600052601260045260246000fd5b500490565b80516001600160701b0381168114612f3d57600080fd5b60008060006060848603121561482a57600080fd5b614833846147fe565b9250614841602085016147fe565b9150604084015163ffffffff8116811461402057600080fd5b6000821982111561486d5761486d6145a1565b500190565b6000600019821415614886576148866145a1565b5060010190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60005b838110156148e95781810151838201526020016148d1565b83811115612be05750506000910152565b60006020828403121561490c57600080fd5b815167ffffffffffffffff8082111561492457600080fd5b818401915084601f83011261493857600080fd5b81518181111561494a5761494a614147565b61495d601f8201601f191660200161415d565b915080825285602082850101111561497457600080fd5b6149858160208401602086016148ce565b50949350505050565b6000602082840312156149a057600080fd5b815161282d816143f5565b600181815b808511156149e65781600019048211156149cc576149cc6145a1565b808516156149d957918102915b93841c93908002906149b0565b509250929050565b6000826149fd575060016123c3565b81614a0a575060006123c3565b8160018114614a205760028114614a2a57614a46565b60019150506123c3565b60ff841115614a3b57614a3b6145a1565b50506001821b6123c3565b5060208310610133831016604e8410600b8410161715614a69575081810a6123c3565b614a7383836149ab565b8060001904821115614a8757614a876145a1565b029392505050565b600061282d83836149ee565b84815283602082015260018060a01b03831660408201526080606082015260008251806080840152614ad48160a08501602087016148ce565b601f01601f19169190910160a00195945050505050565b60008251614afd8184602087016148ce565b9190910192915050565b600061282d60ff8416836149ee565b600082601f830112614b2757600080fd5b81516020614b376142068361418e565b82815260059290921b84018101918181019086841115614b5657600080fd5b8286015b848110156109ec5780518352918301918301614b5a565b600060208284031215614b8357600080fd5b815167ffffffffffffffff811115614b9a57600080fd5b6125d684828501614b16565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008060408385031215614bdf57600080fd5b825167ffffffffffffffff80821115614bf757600080fd5b614c0386838701614b16565b93506020850151915080821115614c1957600080fd5b50614c2685828601614b16565b915050925092905056fea2646970667358221220aa1ad52c3b24dac45c1cfc3ed05ab7b6edadcebdf435f7b6e141be2763213b6e64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isPriceOracle()": {
        "notice": "Indicator that this is a PriceOracle contract (for inspection)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25112,
        "contract": "src/Swap/BaseV1-periphery.sol:BaseV1Router01",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25135,
        "contract": "src/Swap/BaseV1-periphery.sol:BaseV1Router01",
        "label": "isStable",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}