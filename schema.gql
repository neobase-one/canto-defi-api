# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Block {
  _id: ObjectId!
  id: ID!
  number: Int!
  timestamp: Int!
}

input BlocksInput {
  first: Int = 1
  orderBy: String = "date"
  orderDirection: String = "ASC"
  timestampFrom: Int!
  timestampTo: Int!
}

type Bundle {
  _id: ObjectId!
  ethPrice: Decimal!
  id: ID!
}

input BundlesInput {
  blockNumber: Float
  id: Int!
}

type Burn {
  _id: ObjectId!
  amount0: Decimal!
  amount1: Decimal!
  amountUSD: Decimal!
  feeLiquidity: Decimal!
  feeTo: String!
  id: ID!
  liquidity: Decimal!
  logIndex: Decimal!
  needsComplete: Boolean!
  pair: Pair!
  sender: String!
  timestamp: Decimal!
  to: String!
  transaction: Transaction!
}

input BurnsInput {
  first: Int = 20
  orderBy: String = "timestamp"
  orderDirection: String = "ASC"
  pair_in: [String!]!
}

"""The `Decimal` scalar type to represent currency values"""
scalar Decimal

type LiquidityPosition {
  _id: ObjectId!
  id: ID!
  liquidityTokenBalance: Decimal!
  pair: Pair!
  user: User!
}

type LiquidityPositionSnapshot {
  _id: ObjectId!
  blockNumber: Decimal!
  id: ID!
  liquidityPosition: LiquidityPosition!
  liquidityTokenBalance: Decimal!
  liquidityTokenTotalSupply: Decimal!
  pair: Pair!
  reserve0: Decimal!
  reserve1: Decimal!
  reserveUSD: Decimal!
  timestamp: Decimal!
  token0PriceUSD: Decimal!
  token1PriceUSD: Decimal!
  user: User!
}

input LiquidityPositionSnapshotsInput {
  first: Int = 1000
  skip: Int = 0
  user: String!
}

input LiquidityPositionsInput {
  user: String!
}

type Mint {
  _id: ObjectId!
  amount0: Decimal!
  amount1: Decimal!
  amountUSD: Decimal!
  feeLiquidity: Decimal!
  feeTo: String!
  id: ID!
  liquidity: Decimal!
  logIndex: Decimal!
  pair: Pair!
  sender: String!
  timestamp: Decimal!
  to: String!
  transaction: Transaction!
}

input MintsInput {
  first: Int = 20
  orderBy: String = "timestamp"
  orderDirection: String = "ASC"
  pair_in: [String!]!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Pair {
  _id: ObjectId!
  createdAtBlockNumber: Decimal!
  createdAtTimestamp: Decimal!
  id: ID!
  liquidityProviderCount: Decimal!
  reserve0: Decimal!
  reserve1: Decimal!
  reserveETH: Decimal!
  reserveUSD: Decimal!
  token0: Token!
  token0Price: Decimal!
  token1: Token!
  token1Price: Decimal!
  totalSupply: Decimal!
  trackedReserveETH: Decimal!
  txCount: Decimal!
  untrackedVolumeUSD: Decimal!
  volumeToken0: Decimal!
  volumeToken1: Decimal!
  volumeUSD: Decimal!
}

input PairInput {
  first: Int = 1000
  id: String
  id_in: [String!]
  orderBy: String = "date"
  orderDirection: String = "ASC"
  skip: Int = 0
}

type Query {
  burns(input: BurnsInput!): [Burn!]!
  getBlocks(input: BlocksInput!): [Block!]!
  getBundles(input: BundlesInput!): [Bundle!]!
  getPairs(input: PairInput!): [Pair!]!
  health: String!
  liquidityPositionSnapshots(input: LiquidityPositionSnapshotsInput!): [LiquidityPositionSnapshot!]!
  liquidityPositions(input: LiquidityPositionsInput!): [LiquidityPosition!]!
  mints(input: MintsInput!): [Mint!]!
  stableswapFactory(input: StableswapFactoryInput!): StableswapFactory!
  swaps(input: SwapsInput!): [Swap!]!
  tokenDayDatas(input: TokenDayDatasInput!): [TokenDayData!]!
  tokens(input: TokenInput!): [Token!]!
  uniswapDayDatas(input: UniswapDayDatasInput!): [UniswapDayData!]!
  uniswapFactories(input: UniswapFactoriesInput!): [UniswapFactory!]!
}

type StableswapFactory {
  _id: ObjectId!
  id: ID
  pairCount: Int
  totalLiquidityETH: Decimal
  totalLiquidityUSD: Decimal
  totalVolumeETH: Decimal
  totalVolumeUSD: Decimal
  txCount: Decimal
  untrackedVolumeUSD: Decimal
}

input StableswapFactoryInput {
  blockNumber: Float
  id: String!
}

type Swap {
  _id: ObjectId!
  amount0In: Decimal!
  amount0Out: Decimal!
  amount1In: Decimal!
  amount1Out: Decimal!
  amountUSD: Decimal!
  from: String!
  id: ID!
  liquidity: Decimal!
  logIndex: Decimal!
  pair: Pair!
  sender: String!
  timestamp: Decimal!
  to: String!
  transaction: Transaction!
}

input SwapsInput {
  first: Int = 20
  orderBy: String = "timestamp"
  orderDirection: String = "ASC"
  pair_in: [String!]!
}

type Token {
  _id: ObjectId
  decimals: Int
  derivedETH: Decimal
  id: ID!
  name: String
  symbol: String
  totalLiquidity: Decimal
  totalSupply: Decimal
  tradeVolume: Decimal
  tradeVolumeUSD: Decimal
  txCount: Decimal
  untrackedVolumeUSD: Decimal
}

type TokenDayData {
  _id: ObjectId!
  dailyTxns: Decimal!
  dailyVolumeETH: Decimal!
  dailyVolumeToken: Decimal!
  dailyVolumeUSD: Decimal!
  date: Decimal!
  id: ID!
  priceUSD: Decimal!
  token: Token!
  totalLiquidityETH: Decimal!
  totalLiquidityToken: Decimal!
  totalLiquidityUSD: Decimal!
}

input TokenDayDatasInput {
  date: Int
  first: Int = 1000
  orderBy: String = "date"
  orderDirection: String = "ASC"
  skip: Int = 0
  tokenAddress: String
}

input TokenInput {
  block: Int
  first: Int = 500
  id_in: [String!]
  skip: Int = 0
}

type Transaction {
  _id: ObjectId!
  blockNumber: Decimal!
  burns: [Burn!]!
  id: ID!
  mints: [Mint!]!
  swaps: [Swap!]!
  timestamp: Decimal!
}

type UniswapDayData {
  _id: ObjectId!
  dailyVolumeETH: Decimal!
  dailyVolumeUSD: Decimal!
  date: Float!
  id: ID!
  totalLiquidityETH: Decimal!
  totalLiquidityUSD: Decimal!
  totalVolumeUSD: Decimal!
}

input UniswapDayDatasInput {
  first: Int = 1000
  orderBy: String = "date"
  orderDirection: String = "ASC"
  skip: Int = 0
  startTime: Int!
}

input UniswapFactoriesInput {
  block: Float
  id: String!
}

type UniswapFactory {
  _id: ObjectId!
  id: ID
  pairCount: Int
  totalLiquidityETH: Decimal
  totalLiquidityUSD: Decimal
  totalVolumeETH: Decimal
  totalVolumeUSD: Decimal
  txCount: Decimal
  untrackedVolumeUSD: Decimal
}

type User {
  _id: ObjectId!
  id: ID!
  liquidityPosition: LiquidityPosition!
  usdSwapped: Decimal!
}
